import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import base64
from datetime import datetime, timedelta
import numpy as np
from enhanced_analyzer import EnhancedOrderAnalyzer
from utils import generate_mock_data, create_sample_csv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="OzonStream Enhanced Analytics",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.markdown("### üìä OzonStream Enhanced")
    st.markdown("**–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ Ozon**")
    st.markdown("---")
    st.markdown("üí¨ [–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º](https://t.me/alkash_slayer)")
    st.markdown("---")
    
    # –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data_source = st.radio(
        "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:",
        ["üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª", "üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"]
    )

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìä OzonStream Enhanced Analytics")
st.markdown("**–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–∞–∑–æ–≤ Ozon —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 25 –ø–æ–ª–µ–π**")
st.markdown("---")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = None

if data_source == "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª":
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –∑–∞–∫–∞–∑–∞–º–∏ Ozon",
        type=['csv'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç CSV —Å 25 –∫–æ–ª–æ–Ω–∫–∞–º–∏"
    )
    
    if uploaded_file is not None:
        try:
            # –ß–∏—Ç–∞–µ–º CSV —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            df = pd.read_csv(
                uploaded_file,
                sep=';',
                encoding='utf-8',
                quotechar='"'
            )
            
            st.success(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_columns = [
                '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞', '–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É', '–°—Ç–∞—Ç—É—Å',
                '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
            ]
            
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
                st.info("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ:")
                st.write(list(df.columns))
                df = None
            else:
                st.info(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ñ–∞–π–ª–µ")
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            st.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ';', –∫–æ–¥–∏—Ä–æ–≤–∫–∞ UTF-8)")

else:  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ", type="primary"):
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."):
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            mock_data = generate_mock_data(200)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            df_new_format = []
            for i, order in enumerate(mock_data):
                df_new_format.append({
                    '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞': f"{order['order_id']}-{i:04d}",
                    '–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è': f"{order['order_id']}-{i:04d}-1",
                    '–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É': order['order_date'].strftime('%Y-%m-%d %H:%M:%S'),
                    '–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏': (order['order_date'] + timedelta(hours=12)).strftime('%Y-%m-%d %H:%M:%S'),
                    '–°—Ç–∞—Ç—É—Å': order['status'],
                    '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏': order['delivery_date'].strftime('%Y-%m-%d %H:%M:%S') if order['delivery_date'] else '',
                    '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∞–≤–∫—É': (order['order_date'] + timedelta(hours=8)).strftime('%Y-%m-%d %H:%M:%S'),
                    '–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è': order['total_amount'],
                    '–ö–æ–¥ –≤–∞–ª—é—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è': 'RUB',
                    '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': order['product_name'],
                    'OZON id': f"176{np.random.randint(1000000, 9999999)}",
                    '–ê—Ä—Ç–∏–∫—É–ª': f"VMS-{np.random.choice(['TS', 'SW', 'SC', 'TY'])}-{np.random.randint(100, 999)}-{np.random.randint(100, 999)}",
                    '–í–∞—à–∞ —Ü–µ–Ω–∞': order['total_amount'],
                    '–ö–æ–¥ –≤–∞–ª—é—Ç—ã —Ç–æ–≤–∞—Ä–∞': 'RUB',
                    '–û–ø–ª–∞—á–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º': order['total_amount'] * 0.7,
                    '–ö–æ–¥ –≤–∞–ª—é—Ç—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è': 'RUB',
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': order['quantity'],
                    '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏': 0,
                    '–°–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è': '',
                    '–í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞': '',
                    '–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –¥–æ —Å–∫–∏–¥–æ–∫': order['total_amount'] * 1.5,
                    '–°–∫–∏–¥–∫–∞ %': f"{np.random.randint(10, 80)}%",
                    '–°–∫–∏–¥–∫–∞ —Ä—É–±': order['total_amount'] * 0.3,
                    '–ê–∫—Ü–∏–∏': '–°–∏—Å—Ç–µ–º–Ω–∞—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ —Å–µ–ª–ª–µ—Ä–∞ –†–æ—Å—Å–∏—è (RUB)',
                    '–û–±—ä–µ–º–Ω—ã–π –≤–µ—Å —Ç–æ–≤–∞—Ä–æ–≤, –∫–≥': np.random.uniform(0.1, 3.0)
                })
            
            df = pd.DataFrame(df_new_format)
            st.success(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(df)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")

# –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
if df is not None:
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        analyzer = EnhancedOrderAnalyzer(df)
        
        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
            "üìä –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", 
            "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", 
            "üéØ –ê–Ω–∞–ª–∏–∑ —Å–∫–∏–¥–æ–∫", 
            "üöö –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–∞–≤–∫–∏", 
            "üì¶ –õ–æ–≥–∏—Å—Ç–∏–∫–∞", 
            "üìÖ –ú–µ—Å—è—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            "üìà –û—Ç—á–µ—Ç—ã"
        ])
        
        with tab1:
            st.header("üìä –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            metrics = analyzer.get_basic_metrics()
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤", metrics['total_orders'])
            with col2:
                st.metric("–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", metrics['delivered_orders'], 
                         f"{metrics['delivery_rate']:.1f}%")
            with col3:
                st.metric("–û—Ç–º–µ–Ω–µ–Ω–æ", metrics['cancelled_orders'], 
                         f"{metrics['cancellation_rate']:.1f}%")
            with col4:
                st.metric("–í –¥–æ—Å—Ç–∞–≤–∫–µ", metrics['in_delivery'])
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
            col1, col2 = st.columns(2)
            
            with col1:
                status_counts = df['–°—Ç–∞—Ç—É—Å'].value_counts()
                fig_status = px.pie(
                    values=status_counts.values,
                    names=status_counts.index,
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤",
                    color_discrete_sequence=px.colors.qualitative.Set3
                )
                st.plotly_chart(fig_status, use_container_width=True)
            
            with col2:
                # –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –∑–∞–∫–∞–∑–æ–≤
                time_series = analyzer.get_time_series_analysis()
                if isinstance(time_series, pd.DataFrame) and not time_series.empty:
                    fig_time = px.line(
                        time_series,
                        x='date',
                        y='orders_count',
                        title="–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º",
                        markers=True
                    )
                    fig_time.update_layout(xaxis_title="–î–∞—Ç–∞", yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤")
                    st.plotly_chart(fig_time, use_container_width=True)
            
            # –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤
            st.subheader("üèÜ –¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ")
            product_stats = analyzer.analyze_product_categories().head(10)
            
            fig_products = px.bar(
                x=product_stats['total_revenue'],
                y=[name[:40] + '...' if len(name) > 40 else name for name in product_stats.index],
                orientation='h',
                title="–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ",
                labels={'x': '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)', 'y': '–¢–æ–≤–∞—Ä'}
            )
            fig_products.update_layout(height=500)
            st.plotly_chart(fig_products, use_container_width=True)
        
        with tab2:
            st.header("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{metrics['total_revenue']:,.2f} ‚ÇΩ")
            with col2:
                st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{metrics['avg_order_value']:,.2f} ‚ÇΩ")
            with col3:
                st.metric("–û–±—â–∞—è —Å—É–º–º–∞ —Å–∫–∏–¥–æ–∫", f"{metrics['total_discount_amount']:,.2f} ‚ÇΩ")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
            regional_stats = analyzer.get_regional_analysis()
            if isinstance(regional_stats, pd.DataFrame) and not regional_stats.empty:
                st.subheader("üó∫Ô∏è –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
                
                col1, col2 = st.columns(2)
                with col1:
                    fig_region_orders = px.bar(
                        x=regional_stats.index,
                        y=regional_stats['order_count'],
                        title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º",
                        labels={'x': '–†–µ–≥–∏–æ–Ω', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'}
                    )
                    st.plotly_chart(fig_region_orders, use_container_width=True)
                
                with col2:
                    fig_region_revenue = px.bar(
                        x=regional_stats.index,
                        y=regional_stats['total_revenue'],
                        title="–í—ã—Ä—É—á–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º",
                        labels={'x': '–†–µ–≥–∏–æ–Ω', 'y': '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)'}
                    )
                    st.plotly_chart(fig_region_revenue, use_container_width=True)
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏
            time_series = analyzer.get_time_series_analysis()
            if isinstance(time_series, pd.DataFrame) and not time_series.empty:
                st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏")
                
                fig_revenue_time = px.line(
                    time_series,
                    x='date',
                    y='daily_revenue',
                    title="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞",
                    markers=True
                )
                fig_revenue_time.update_layout(xaxis_title="–î–∞—Ç–∞", yaxis_title="–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)")
                st.plotly_chart(fig_revenue_time, use_container_width=True)
        
        with tab3:
            st.header("üéØ –ê–Ω–∞–ª–∏–∑ —Å–∫–∏–¥–æ–∫ –∏ –∞–∫—Ü–∏–π")
            
            discount_analysis = analyzer.analyze_discounts()
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–ó–∞–∫–∞–∑–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π", discount_analysis['orders_with_discount'])
            with col2:
                st.metric("% –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π", f"{discount_analysis['discount_percentage']:.1f}%")
            with col3:
                st.metric("–°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞", f"{discount_analysis['avg_discount_amount']:.2f} ‚ÇΩ")
            with col4:
                st.metric("–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è", f"{discount_analysis['total_savings']:,.2f} ‚ÇΩ")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–∫–∏–¥–æ–∫
                if '–°–∫–∏–¥–∫–∞ —Ä—É–±' in df.columns:
                    discount_data = df[df['–°–∫–∏–¥–∫–∞ —Ä—É–±'] > 0]['–°–∫–∏–¥–∫–∞ —Ä—É–±']
                    if len(discount_data) > 0:
                        fig_discount_dist = px.histogram(
                            x=discount_data,
                            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–∫–∏–¥–æ–∫",
                            labels={'x': '–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (‚ÇΩ)', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'},
                            nbins=20
                        )
                        st.plotly_chart(fig_discount_dist, use_container_width=True)
            
            with col2:
                # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–π
                if '–ê–∫—Ü–∏–∏' in df.columns:
                    promo_counts = df['–ê–∫—Ü–∏–∏'].value_counts().head(10)
                    if len(promo_counts) > 0:
                        fig_promos = px.bar(
                            x=promo_counts.values,
                            y=[name[:30] + '...' if len(name) > 30 else name for name in promo_counts.index],
                            orientation='h',
                            title="–¢–æ–ø –∞–∫—Ü–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤",
                            labels={'x': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', 'y': '–ê–∫—Ü–∏—è'}
                        )
                        st.plotly_chart(fig_promos, use_container_width=True)
        
        with tab4:
            st.header("üöö –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–∞–≤–∫–∏")
            
            delivery_analysis = analyzer.analyze_delivery_performance()
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏", f"{delivery_analysis['avg_delivery_time']:.1f} –¥–Ω–µ–π")
            with col2:
                st.metric("–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è", f"{delivery_analysis['median_delivery_time']:.1f} –¥–Ω–µ–π")
            with col3:
                st.metric("–î–æ—Å—Ç–∞–≤–∫–∞ –≤–æ–≤—Ä–µ–º—è", f"{delivery_analysis['on_time_delivery_rate']:.1f}%")
            with col4:
                st.metric("–í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", delivery_analysis['total_delivered'])
            
            # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            delivered_orders = df[df['–°—Ç–∞—Ç—É—Å'] == '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'].copy()
            if len(delivered_orders) > 0 and '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏' in df.columns and '–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É' in df.columns:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                delivered_orders['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É'] = pd.to_datetime(delivered_orders['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É'], errors='coerce')
                delivered_orders['–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'] = pd.to_datetime(delivered_orders['–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'], errors='coerce')
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
                delivered_orders['delivery_time'] = (
                    delivered_orders['–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'] - delivered_orders['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É']
                ).dt.days
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                valid_delivery_times = delivered_orders[
                    (delivered_orders['delivery_time'] >= 0) & 
                    (delivered_orders['delivery_time'] <= 30)
                ]['delivery_time']
                
                if len(valid_delivery_times) > 0:
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        fig_delivery_hist = px.histogram(
                            x=valid_delivery_times,
                            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏",
                            labels={'x': '–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–¥–Ω–∏)', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'},
                            nbins=15
                        )
                        st.plotly_chart(fig_delivery_hist, use_container_width=True)
                    
                    with col2:
                        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
                        delivery_categories = pd.cut(
                            valid_delivery_times,
                            bins=[0, 1, 3, 5, 10, 30],
                            labels=['1 –¥–µ–Ω—å', '2-3 –¥–Ω—è', '4-5 –¥–Ω–µ–π', '6-10 –¥–Ω–µ–π', '11+ –¥–Ω–µ–π']
                        ).value_counts()
                        
                        fig_delivery_cat = px.pie(
                            values=delivery_categories.values,
                            names=delivery_categories.index,
                            title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"
                        )
                        st.plotly_chart(fig_delivery_cat, use_container_width=True)
        
        with tab5:
            st.header("üì¶ –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
            
            weight_analysis = analyzer.analyze_weight_logistics()
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–û–±—â–∏–π –≤–µ—Å", f"{weight_analysis['total_weight_kg']:.2f} –∫–≥")
            with col2:
                st.metric("–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å –∑–∞–∫–∞–∑–∞", f"{weight_analysis['avg_weight_per_order']:.0f} –≥")
            with col3:
                st.metric("–¢—è–∂–µ–ª—ã—Ö –∑–∞–∫–∞–∑–æ–≤", f"{weight_analysis['heavy_orders_count']} ({weight_analysis['heavy_orders_percentage']:.1f}%)")
            with col4:
                st.metric("–õ–µ–≥–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤", f"{weight_analysis['light_orders_count']} ({weight_analysis['light_orders_percentage']:.1f}%)")
            
            # –ê–Ω–∞–ª–∏–∑ –≤–µ—Å–∞ —Ç–æ–≤–∞—Ä–æ–≤
            if '–û–±—ä–µ–º–Ω—ã–π –≤–µ—Å —Ç–æ–≤–∞—Ä–æ–≤, –∫–≥' in df.columns:
                weight_data = df['–û–±—ä–µ–º–Ω—ã–π –≤–µ—Å —Ç–æ–≤–∞—Ä–æ–≤, –∫–≥'].dropna()
                if len(weight_data) > 0:
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        fig_weight_hist = px.histogram(
                            x=weight_data,
                            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–∞ —Ç–æ–≤–∞—Ä–æ–≤",
                            labels={'x': '–í–µ—Å (–∫–≥)', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'},
                            nbins=20
                        )
                        st.plotly_chart(fig_weight_hist, use_container_width=True)
                    
                    with col2:
                        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–µ—Å–∞
                        weight_categories = pd.cut(
                            weight_data,
                            bins=[0, 0.5, 1.0, 2.0, 5.0, float('inf')],
                            labels=['‚â§0.5–∫–≥', '0.5-1–∫–≥', '1-2–∫–≥', '2-5–∫–≥', '>5–∫–≥']
                        ).value_counts()
                        
                        fig_weight_cat = px.pie(
                            values=weight_categories.values,
                            names=weight_categories.index,
                            title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–µ—Å–∞ —Ç–æ–≤–∞—Ä–æ–≤"
                        )
                        st.plotly_chart(fig_weight_cat, use_container_width=True)
        
        with tab6:
            st.header("üìÖ –ú–µ—Å—è—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            monthly_analysis = analyzer.get_monthly_analysis()
            
            if not monthly_analysis.empty:
                st.subheader("üìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º")
                
                # –¢–æ–ø-3 —Å–∞–º—ã—Ö —É—Å–ø–µ—à–Ω—ã—Ö –º–µ—Å—è—Ü–∞
                top_months = monthly_analysis.nlargest(3, 'success_rating')
                
                col1, col2, col3 = st.columns(3)
                for i, (idx, month_data) in enumerate(top_months.iterrows()):
                    with [col1, col2, col3][i]:
                        st.metric(
                            f"üèÜ #{i+1} {month_data['month']}",
                            f"{month_data['success_rating']:.1f} –±–∞–ª–ª–æ–≤",
                            f"{month_data['total_revenue']:,.0f} ‚ÇΩ"
                        )
                
                st.markdown("---")
                
                # –ì—Ä–∞—Ñ–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
                col1, col2 = st.columns(2)
                
                with col1:
                    # –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Å—è—Ü–∞–º (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É)
                    monthly_analysis_rating = monthly_analysis.sort_values('success_rating', ascending=False)
                    fig_rating = px.bar(
                        monthly_analysis_rating,
                        x='month',
                        y='success_rating',
                        title="–†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Å—è—Ü–∞–º",
                        labels={'month': '–ú–µ—Å—è—Ü', 'success_rating': '–†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏'},
                        color='success_rating',
                        color_continuous_scale='RdYlGn'
                    )
                    fig_rating.update_layout(xaxis_tickangle=-45)
                    st.plotly_chart(fig_rating, use_container_width=True)
                
                with col2:
                    # –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º (–¥–∞–Ω–Ω—ã–µ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ)
                    fig_revenue = px.line(
                        monthly_analysis,
                        x='month',
                        y='total_revenue',
                        title="–î–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º",
                        labels={'month': '–ú–µ—Å—è—Ü', 'total_revenue': '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)'},
                        markers=True
                    )
                    fig_revenue.update_layout(xaxis_tickangle=-45)
                    st.plotly_chart(fig_revenue, use_container_width=True)
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_data = monthly_analysis.copy()
                display_data['total_revenue'] = display_data['total_revenue'].apply(lambda x: f"{x:,.0f} ‚ÇΩ")
                display_data['avg_order_value'] = display_data['avg_order_value'].apply(lambda x: f"{x:,.0f} ‚ÇΩ")
                display_data['total_discount'] = display_data['total_discount'].apply(lambda x: f"{x:,.0f} ‚ÇΩ")
                display_data['avg_weight_kg'] = display_data['avg_weight_kg'].apply(lambda x: f"{x*1000:.0f} –≥" if pd.notna(x) else "N/A")
                display_data['total_weight_kg'] = display_data['total_weight_kg'].apply(lambda x: f"{x:.1f} –∫–≥" if pd.notna(x) else "N/A")
                display_data['revenue_per_order'] = display_data['revenue_per_order'].apply(lambda x: f"{x:,.0f} ‚ÇΩ")
                display_data['discount_rate'] = display_data['discount_rate'].apply(lambda x: f"{x:.1f}%")
                display_data['success_rating'] = display_data['success_rating'].apply(lambda x: f"{x:.1f}")
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_data.columns = [
                    '–ú–µ—Å—è—Ü-–≥–æ–¥', '–ó–∞–∫–∞–∑—ã', '–í—ã—Ä—É—á–∫–∞', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', '–°–∫–∏–¥–∫–∏', 
                    '–¢–æ–≤–∞—Ä—ã', '–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å', '–û–±—â–∏–π –≤–µ—Å', '–í—ã—Ä—É—á–∫–∞/–∑–∞–∫–∞–∑', 
                    '–°–∫–∏–¥–∫–∞ %', '–¢–æ–≤–∞—Ä—ã/–∑–∞–∫–∞–∑', '–†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏', '–ú–µ—Å—è—Ü'
                ]
                
                st.dataframe(display_data, use_container_width=True)
                
                # –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —Ä–µ–π—Ç–∏–Ω–≥—É
                st.info("""
                **üìä –ú–µ—Ç–æ–¥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏:**
                - 40% - –≤—ã—Ä—É—á–∫–∞ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)
                - 30% - –æ–±—ä–µ–º –∑–∞–∫–∞–∑–æ–≤ √ó —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)
                - 20% - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∫–∏–¥–æ–∫ (–æ–±—Ä–∞—Ç–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç % —Å–∫–∏–¥–æ–∫)
                - 10% - —Ç–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤)
                
                –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 100 –±–∞–ª–ª–æ–≤
                """)
            else:
                st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        
        with tab7:
            st.header("üìà –û—Ç—á–µ—Ç—ã –∏ –∏–Ω—Å–∞–π—Ç—ã")
            
            # –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
            st.subheader("üîç –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã")
            insights = analyzer.get_summary_insights()
            for insight in insights:
                st.info(insight)
            
            st.markdown("---")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel –æ—Ç—á–µ—Ç–∞
            st.subheader("üìä –°–∫–∞—á–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Excel –æ—Ç—á–µ—Ç")
            
            if st.button("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", type="primary"):
                with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞..."):
                    try:
                        excel_buffer = analyzer.generate_enhanced_excel_report()
                        
                        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        excel_data = excel_buffer.getvalue()
                        b64 = base64.b64encode(excel_data).decode()
                        
                        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        filename = f"ozon_enhanced_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                        href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="{filename}">üì• –°–∫–∞—á–∞—Ç—å Excel –æ—Ç—á–µ—Ç</a>'
                        
                        st.markdown(href, unsafe_allow_html=True)
                        st.success("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞
                        st.info("""
                        üìã **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞:**
                        - **–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏**: –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
                        - **–ê–Ω–∞–ª–∏–∑ —Å–∫–∏–¥–æ–∫**: –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö –∏ –∞–∫—Ü–∏—è—Ö
                        - **–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤**: —Ç–æ–ø-20 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ
                        - **–ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–∞–≤–∫–∏**: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
                        - **–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–µ—Å—É**: –∞–Ω–∞–ª–∏–∑ –≤–µ—Å–∞ —Ç–æ–≤–∞—Ä–æ–≤
                        """)
                        
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º")
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
                st.write(f"- –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
                st.write(f"- –ö–æ–ª–æ–Ω–æ–∫ –≤ —Ñ–∞–π–ª–µ: {len(df.columns)}")
                st.write(f"- –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {df['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É'].min()} - {df['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É'].max()}")
            
            with col2:
                st.write("**–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:**")
                missing_data = df.isnull().sum().sum()
                total_cells = len(df) * len(df.columns)
                completeness = ((total_cells - missing_data) / total_cells * 100)
                st.write(f"- –ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {completeness:.1f}%")
                st.write(f"- –ü—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {missing_data}")
                st.write(f"- –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {df['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞'].nunique()}")
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        st.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")

else:
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    st.info("""
    ### üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OzonStream Enhanced Analytics!
    
    **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
    - ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ CSV —Å 25 –∫–æ–ª–æ–Ω–∫–∞–º–∏
    - üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∫–∏–¥–æ–∫ –∏ –∞–∫—Ü–∏–π
    - üöö –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    - üì¶ –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ –≤–µ—Å—É —Ç–æ–≤–∞—Ä–æ–≤
    - üó∫Ô∏è –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    - üìà –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ –∏–Ω—Å–∞–π—Ç—ã
    
    **–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**
    1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –∑–∞–∫–∞–∑–∞–º–∏ Ozon –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    2. –ò–∑—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤–æ –≤–∫–ª–∞–¥–∫–∞—Ö
    3. –°–∫–∞—á–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π Excel –æ—Ç—á–µ—Ç
    
    **–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:**
    - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π (;)
    - –ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å 25 –∫–æ–ª–æ–Ω–∫–∞–º–∏
    """)
    
    # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–æ–≤–æ–≥–æ CSV
    st.subheader("üìã –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–æ–≤–æ–≥–æ CSV —Ñ–∞–π–ª–∞")
    example_columns = [
        "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É", "–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏",
        "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", "–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        "–í–∞—à–∞ —Ü–µ–Ω–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –¥–æ —Å–∫–∏–¥–æ–∫", "–°–∫–∏–¥–∫–∞ %",
        "–°–∫–∏–¥–∫–∞ —Ä—É–±", "–ê–∫—Ü–∏–∏", "–û–±—ä–µ–º–Ω—ã–π –≤–µ—Å —Ç–æ–≤–∞—Ä–æ–≤, –∫–≥", "–∏ –¥—Ä—É–≥–∏–µ..."
    ]
    
    st.code(";".join(example_columns[:8]) + ";...")
    st.caption("–í—Å–µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è 25 –∫–æ–ª–æ–Ω–æ–∫ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö")