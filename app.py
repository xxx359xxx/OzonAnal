import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import numpy as np
from io import BytesIO
import base64
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
import tempfile
import os
from utils import OrderAnalyzer, generate_mock_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Order Delivery Analyzer",
    page_icon="üì¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üì¶ Order Delivery Analyzer")
st.markdown("### –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–æ–≤")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

# –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
st.sidebar.markdown("---")
st.sidebar.markdown("üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã**")
st.sidebar.markdown("""
<a href="https://t.me/alkash_slayer" target="_blank">
    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm4.64 6.8c-.15 1.58-.8 5.42-1.13 7.19-.14.75-.42 1-.68 1.03-.58.05-1.02-.38-1.58-.75-.88-.58-1.38-.94-2.23-1.5-.99-.65-.35-1.01.22-1.59.15-.15 2.71-2.48 2.76-2.69a.2.2 0 00-.05-.18c-.06-.05-.14-.03-.21-.02-.09.02-1.49.95-4.22 2.79-.4.27-.76.41-1.08.4-.36-.01-1.04-.2-1.55-.37-.63-.2-1.12-.31-1.08-.66.02-.18.27-.36.74-.55 2.92-1.27 4.86-2.11 5.83-2.51 2.78-1.16 3.35-1.36 3.73-1.36.08 0 .27.02.39.12.1.08.13.19.14.27-.01.06.01.24 0 .38z" fill="#0088cc"/>
    </svg>
    Telegram
</a>
""", unsafe_allow_html=True)
st.sidebar.markdown("---")

# –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data_source = st.sidebar.radio(
    "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:",
    ["–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
df = None

if data_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª":
    uploaded_file = st.sidebar.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª",
        type=['csv'],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É, –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏, –°—Ç–∞—Ç—É—Å, –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏, –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∞–≤–∫—É, –°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, OZON id, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    )
    
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file, sep=';', encoding='utf-8')
            st.sidebar.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {len(df)} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
else:
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    st.sidebar.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    n_orders = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤", 50, 500, 100, 25)
    
    if st.sidebar.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö..."):
            df = generate_mock_data(n_orders)
            st.sidebar.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {len(df)} –∑–∞–ø–∏—Å–µ–π")

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if df is not None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    required_columns = [
        '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞', '–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É', '–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏',
        '–°—Ç–∞—Ç—É—Å', '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏', '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∞–≤–∫—É',
        '–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', 'OZON id', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
    ]
    
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_columns)}")
        st.stop()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    analyzer = OrderAnalyzer(df)
    
    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs(["üìä –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "üìà –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–∞–≤–∫–∏", "üîç –§–∏–ª—å—Ç—Ä—ã", "üìÑ –û—Ç—á–µ—Ç"])
    
    with tab1:
        st.header("üìä –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤", len(df))
        
        with col2:
            delivered = len(df[df['–°—Ç–∞—Ç—É—Å'] == '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'])
            st.metric("–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", delivered)
        
        with col3:
            avg_sum = analyzer.df['–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'].mean()
            st.metric("–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞", f"{avg_sum:.2f} ‚ÇΩ")
        
        with col4:
            total_sum = analyzer.df['–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'].sum()
            st.metric("–û–±—â–∞—è —Å—É–º–º–∞", f"{total_sum:.2f} ‚ÇΩ")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤")
            status_dist = df['–°—Ç–∞—Ç—É—Å'].value_counts()
            fig_status = px.pie(values=status_dist.values, names=status_dist.index, 
                               title="–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤")
            st.plotly_chart(fig_status, use_container_width=True)
        
        with col2:
            st.subheader("–¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É")
            top_products = analyzer.df.groupby('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().sort_values(ascending=False).head(10)
            fig_products = px.bar(x=top_products.values, y=top_products.index, 
                                orientation='h', title="–¢–æ–ø —Ç–æ–≤–∞—Ä—ã")
            st.plotly_chart(fig_products, use_container_width=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        st.subheader("–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df.head(50), use_container_width=True)
    
    with tab2:
        st.header("üìà –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–∞–≤–∫–∏")
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = analyzer.calculate_delivery_metrics()
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏",
                f"{metrics['avg_delivery_time']:.1f} –¥–Ω–µ–π"
            )
        
        with col2:
            st.metric(
                "–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏",
                f"{metrics['median_delivery_time']:.1f} –¥–Ω–µ–π"
            )
        
        with col3:
            st.metric(
                "–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∞–≤–∫—É",
                f"{metrics['avg_processing_time']:.1f} –¥–Ω–µ–π"
            )
        
        with col4:
            st.metric(
                "–í—Ä–µ–º—è –≤ –¥–æ—Å—Ç–∞–≤–∫–µ",
                f"{metrics['avg_shipping_time']:.1f} –¥–Ω–µ–π"
            )
        
        # –ì—Ä–∞—Ñ–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–ó–∞–∫–∞–∑—ã –ø–æ –¥–Ω—è–º")
            daily_orders = analyzer.get_daily_orders()
            fig_daily = px.line(daily_orders, x='date', y='count', 
                               title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º")
            st.plotly_chart(fig_daily, use_container_width=True)
        
        with col2:
            st.subheader("–¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—É–º–º–µ")
            top_revenue = analyzer.df.groupby('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')['–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'].sum().sort_values(ascending=False).head(10)
            fig_revenue = px.bar(x=top_revenue.values, y=top_revenue.index, 
                               orientation='h', title="–¢–æ–ø —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—ã—Ä—É—á–∫–µ")
            st.plotly_chart(fig_revenue, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–¥–µ—Ä–∂–µ–∫
        st.subheader("–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏")
        delays = analyzer.get_delivery_delays()
        if len(delays) > 0:
            fig_delays = px.histogram(delays, x='delay_days', 
                                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–µ–∫ (–¥–Ω–∏)")
            st.plotly_chart(fig_delays, use_container_width=True)
        else:
            st.info("–ó–∞–¥–µ—Ä–∂–µ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    with tab3:
        st.header("üîç –§–∏–ª—å—Ç—Ä—ã –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        
        # –§–∏–ª—å—Ç—Ä—ã
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ analyzer.df –≤–º–µ—Å—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ df
            valid_dates = analyzer.df['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É'].dropna()
            if len(valid_dates) > 0:
                date_range = st.date_input(
                    "–ü–µ—Ä–∏–æ–¥",
                    value=(valid_dates.min().date(), 
                          valid_dates.max().date()),
                    min_value=valid_dates.min().date(),
                    max_value=valid_dates.max().date()
                )
            else:
                st.error("–ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞—Ç –≤ —Å—Ç–æ–ª–±—Ü–µ '–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É'")
                date_range = []
        
        with col2:
            # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            selected_statuses = st.multiselect(
                "–°—Ç–∞—Ç—É—Å—ã",
                options=analyzer.df['–°—Ç–∞—Ç—É—Å'].unique(),
                default=analyzer.df['–°—Ç–∞—Ç—É—Å'].unique()
            )
        
        with col3:
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–≤–∞—Ä–∞–º
            selected_products = st.multiselect(
                "–¢–æ–≤–∞—Ä—ã",
                options=analyzer.df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'].unique(),
                default=analyzer.df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'].unique()[:10]  # –ü–µ—Ä–≤—ã–µ 10 –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            )
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if len(date_range) == 2:
            start_date, end_date = date_range
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
            filtered_df = analyzer.df[
                (analyzer.df['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É'].notna()) &
                (analyzer.df['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É'].dt.date >= start_date) &
                (analyzer.df['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É'].dt.date <= end_date) &
                (analyzer.df['–°—Ç–∞—Ç—É—Å'].isin(selected_statuses)) &
                (analyzer.df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'].isin(selected_products))
            ]
        else:
            filtered_df = analyzer.df[
                (analyzer.df['–°—Ç–∞—Ç—É—Å'].isin(selected_statuses)) &
                (analyzer.df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'].isin(selected_products))
            ]
        
        if len(filtered_df) == 0:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
        else:
            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_df)} –∑–∞–∫–∞–∑–æ–≤")
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            filtered_analyzer = OrderAnalyzer(filtered_df)
            filtered_metrics = filtered_analyzer.calculate_delivery_metrics()
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ñ–∏–ª—å—Ç—Ä)",
                    f"{filtered_metrics['avg_delivery_time']:.1f} –¥–Ω–µ–π"
                )
            
            with col2:
                filtered_analyzer = OrderAnalyzer(filtered_df)
                avg_sum_filtered = filtered_analyzer.df['–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'].mean()
                st.metric(
                    "–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ (—Ñ–∏–ª—å—Ç—Ä)",
                    f"{avg_sum_filtered:.2f} ‚ÇΩ"
                )
            
            with col3:
                delivered_filtered = len(filtered_df[filtered_df['–°—Ç–∞—Ç—É—Å'] == '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'])
                delivery_rate = (delivered_filtered / len(filtered_df)) * 100
                st.metric(
                    "–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏",
                    f"{delivery_rate:.1f}%"
                )
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
            st.subheader("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            st.dataframe(filtered_df, use_container_width=True)
    
    with tab4:
        st.header("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
        
        st.markdown("""
        –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Excel-–æ—Ç—á–µ—Ç —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π.
        Excel —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–æ–±–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏.
        """)
        
        if st.button("üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Excel –æ—Ç—á–µ—Ç"):
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞..."):
                try:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel –æ—Ç—á–µ—Ç–∞
                    excel_buffer = analyzer.generate_excel_report()
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    b64_excel = base64.b64encode(excel_buffer.getvalue()).decode()
                    href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64_excel}" download="order_delivery_report.xlsx">üì• –°–∫–∞—á–∞—Ç—å Excel –æ—Ç—á–µ—Ç</a>'
                    st.markdown(href, unsafe_allow_html=True)
                    
                    st.success("‚úÖ Excel –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                    st.info("üí° Excel –æ—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç 5 –ª–∏—Å—Ç–æ–≤: –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏, –¢–æ–ø —Ç–æ–≤–∞—Ä—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ), –¢–æ–ø —Ç–æ–≤–∞—Ä—ã (–≤—ã—Ä—É—á–∫–∞), –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤, –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–µ—Ä–∂–µ–∫")
                    
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        

        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        st.subheader("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—Ä–∏–∫")
        
        metrics = analyzer.calculate_delivery_metrics()
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**")
            st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {metrics['avg_delivery_time']:.1f} –¥–Ω–µ–π")
            st.write(f"‚Ä¢ –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {metrics['median_delivery_time']:.1f} –¥–Ω–µ–π")
            st.write(f"‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {metrics['avg_processing_time']:.1f} –¥–Ω–µ–π")
            st.write(f"‚Ä¢ –í—Ä–µ–º—è –≤ –¥–æ—Å—Ç–∞–≤–∫–µ: {metrics['avg_shipping_time']:.1f} –¥–Ω–µ–π")
        
        with col2:
            st.write("**–û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:**")
            st.write(f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(df)}")
            st.write(f"‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {len(df[df['–°—Ç–∞—Ç—É—Å'] == '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'])}")
            st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: {analyzer.df['–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'].mean():.2f} ‚ÇΩ")
            st.write(f"‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {analyzer.df['–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'].sum():.2f} ‚ÇΩ")

else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üìã –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ CSV —Ñ–∞–π–ª–∞")
    
    example_data = {
        '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞': ['ORD001', 'ORD002'],
        '–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è': ['SHIP001', 'SHIP002'],
        '–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É': ['2024-01-01 10:00:00', '2024-01-01 11:00:00'],
        '–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏': ['2024-01-02 09:00:00', '2024-01-02 10:00:00'],
        '–°—Ç–∞—Ç—É—Å': ['–î–æ—Å—Ç–∞–≤–ª–µ–Ω', '–í –ø—É—Ç–∏'],
        '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏': ['2024-01-05 14:00:00', ''],
        '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∞–≤–∫—É': ['2024-01-02 15:00:00', '2024-01-02 16:00:00'],
        '–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è': [1500.00, 2300.50],
        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': ['–¢–æ–≤–∞—Ä –ê', '–¢–æ–≤–∞—Ä –ë'],
        'OZON id': ['OZ123', 'OZ124'],
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [2, 1]
    }
    
    example_df = pd.DataFrame(example_data)
    st.dataframe(example_df, use_container_width=True)
    
    st.markdown("""
    **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É:**
    - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: `;` (—Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π)
    - –ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8
    - –§–æ—Ä–º–∞—Ç –¥–∞—Ç: YYYY-MM-DD HH:MM:SS
    """)